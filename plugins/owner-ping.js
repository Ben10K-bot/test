 import { exec } from 'child_process'
import os from 'os'
import { performance } from 'perf_hooks'
import fs from 'fs' // ูููุตูู ุฅูู ูุนูููุงุช ุงููุฑุต

let handler = async (m, { conn }) => {
  let pingMsg = await conn.sendMessage(m.chat, { text: '๐ง ููุงุณ ุงูุณุฑุนุฉ...' })

  let start = performance.now()

  exec('neofetch --stdout', async (error, stdout) => {
    let end = performance.now()
    let latency = (end - start).toFixed(2)

    let cpuInfo = os.cpus()[0].model
    let cpuCores = os.cpus().length
    let cpuSpeeds = os.cpus().map(cpu => cpu.speed)
    let minCpuSpeed = (Math.min(...cpuSpeeds) / 1000).toFixed(2) + ' GHz'
    let maxCpuSpeed = (Math.max(...cpuSpeeds) / 1000).toFixed(2) + ' GHz'

    let totalMemory = (os.totalmem() / 1024 / 1024).toFixed(2) + ' MB'
    let freeMemory = (os.freemem() / 1024 / 1024).toFixed(2) + ' MB'
    let usedMemory = (((os.totalmem() - os.freemem()) / os.totalmem()) * 100).toFixed(2) + ' %'
    let loadAvg = os.loadavg()
    let osType = os.type()
    let osArch = os.arch()

    // ูุณุจุฉ ุชุญููู ูู ููุงุฉ
    let cpuLoadPerCore = os.cpus().map((core, index) => `ููุงุฉ ${index + 1}: ${core.speed / 1000} GHz`).join('\n')

    // ุญุณุงุจ ูุฏุฉ ุงูุชุดุบูู ูุชุญููููุง ุฅูู ุตูุบุฉ ูููููุฉ
    let uptime = os.uptime()
    let uptimeHours = Math.floor(uptime / 3600)
    let uptimeMinutes = Math.floor((uptime % 3600) / 60)
    let uptimeSeconds = Math.floor(uptime % 60)
    let uptimeStr = `${uptimeHours} ุณุงุนุฉุ ${uptimeMinutes} ุฏูููุฉุ ${uptimeSeconds} ุซุงููุฉ`

    // ูุนูููุงุช ุงููุฑุต
    let diskInfo = 'ุบูุฑ ูุชุงุญ'
    try {
      const { size, free } = fs.statSync('/')
      diskInfo = `ุงููุณุงุญุฉ ุงููููุฉ: ${(size / 1024 / 1024 / 1024).toFixed(2)} GB (ุงููุชุงุญุฉ: ${(free / 1024 / 1024 / 1024).toFixed(2)} GB)`
    } catch (e) {
      diskInfo = 'ูู ูุชููู ูู ุฌูุจ ูุนูููุงุช ุงููุฑุต'
    }

    let message = `
๐ง *ุงูุจูุฌ*: ${latency} ms
๐ง *ูุธุงู ุงูุชุดุบูู*: ${osType}
๐ง *ูุนูุงุฑูุฉ ุงููุธุงู*: ${osArch}
๐ง *ุงููุนุงูุฌ*: ${cpuInfo} (${cpuCores} ุฃูููุฉ)
๐ง *ุชุฑุฏุฏ ุงููุนุงูุฌ*: ูู ${minCpuSpeed} ุฅูู ${maxCpuSpeed}
๐ง *ูุณุจุฉ ุชุญููู ูู ููุงุฉ*:
${cpuLoadPerCore}
๐ง *ุฐุงูุฑุฉ ุงููุธุงู ุงููููุฉ*: ${totalMemory}
๐ง *ุงูุฐุงูุฑุฉ ุงููุชุงุญุฉ*: ${freeMemory}
๐ง *ูุณุจุฉ ุงูุฐุงูุฑุฉ ุงููุณุชุฎุฏูุฉ*: ${usedMemory}
๐ง *ุชุญููู ุงููุนุงูุฌ (1 ุฏูููุฉ)*: ${loadAvg[0].toFixed(2)}
๐ง *ุชุญููู ุงููุนุงูุฌ (5 ุฏูุงุฆู)*: ${loadAvg[1].toFixed(2)}
๐ง *ุชุญููู ุงููุนุงูุฌ (15 ุฏูููุฉ)*: ${loadAvg[2].toFixed(2)}
๐ง *ูุฏุฉ ุงูุชุดุบูู*: ${uptimeStr}
๐ง *ูุนูููุงุช ุงููุฑุต*: ${diskInfo}
`.trim()

    await conn.relayMessage(m.chat, {
      protocolMessage: {
        key: pingMsg.key,
        type: 14,
        editedMessage: { conversation: message }
      }
    }, {})
  })
}

handler.help = ['ping']
handler.tags = ['main']
handler.command = ['2ุจูุฌ', 'speed2']

export default handler